; Initialize registers with immediate values
MOVI R1 10         ; R1 = 10
MOVI R2 20         ; R2 = 20
MOVI R3 5          ; R3 = 5
MOVI R4 0          ; R4 = 0 (used for comparisons and memory addressing)
MOVI R5 1          ; R5 = 1 (used for JEQ target address calculation)
MOVI R6 0          ; R6 = temp register
MOVI R7 0          ; R7 = temp register

; Arithmetic Operations
ADD R6 R1 R2       ; R6 = R1 + R2 = 10 + 20 = 30
SUB R7 R2 R1       ; R7 = R2 - R1 = 20 - 10 = 10
MUL R3 R1 R3       ; R3 = R1 * R3 = 10 * 5 = 50

; Logical Operations
AND R4 R1 R2       ; R4 = R1 & R2 = 10 & 20 = 0 (1010 & 10100 = 0)
XORI R4 R1 15      ; R4 = R1 ⊕ 15 = 10 ⊕ 15 = 5

; Shift Operations
LSL R5 R1 1        ; R5 = R1 << 1 = 10 << 1 = 20
LSR R5 R2 2        ; R5 = R2 >>> 2 = 20 >>> 2 = 5

; Memory Operations
MOVI R6 100        ; R6 = 100 (base address)
MOVM R1 R6 0       ; MEM[R6 + 0] = R1
MOVR R7 R6 0       ; R7 = MEM[R6 + 0], should be 10

; Conditional Branch
JEQ R1 R1 2        ; If R1 == R1, PC += 1 + 2 → Skips the next 2 lines if true
MOVI R1 0          ; [SKIPPED] would reset R1 to 0
MOVI R2 0          ; [SKIPPED] would reset R2 to 0

; Unconditional Jump
JMP 00000010       ; Jump to address (e.g., offset 0x10); adjust as per actual memory map
